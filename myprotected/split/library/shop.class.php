<?php	/*	KLYCHA WEB TECHNOLOGIES	*/	/*	***************************	*/	/*	Author: Sivkovich Maxim		*/	/*	***************************	*/	/*	Developed: from 2013		*/	/*	***************************	*/		// Settings class	require("BasicHelp.php");class shopHelp extends BasicHelp{   		public $dbh;				public $table;		public $id;		public $item;				public function __construct($dbh)		{			parent::__construct($dbh);			$this->dbh = $dbh;		} 				// Get All Langs		public function getAllLangs(){			$q = "				SELECT * FROM [pre]languages WHERE `used` = 0 LIMIT 1000 			";			return $this->rs($q);		}				// Get Available Langs		public function getAvailableLangs(){				$query = "					SELECT L.name, L.alias, M.block, M.id 					FROM [pre]site_languages AS M 					LEFT JOIN [pre]languages AS L ON L.id = M.lang_id 					WHERE 1 $filter_and AND L.alias != '".DEF_LANG."'					ORDER BY M.id					LIMIT 1000				";										return $this->rs($query);		}				///////////////////////////////////////////				// ORDERS				///////////////////////////////////////////				// Get rent orders item				public function getReturnOrdersItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "				SELECT M.* , 					CONCAT(U.name, ' ', U.fname) as user_name,					U.login,					U.num as user_number,					OS.name as order_status_name,					PS.name as payment_status_name,					PM.name as payment_method_name,				(SELECT `code` FROM [pre]o_coupons WHERE id=M.promocode_id LIMIT 1) as promo_code 				FROM [pre]o_orders as M 				LEFT JOIN [pre]users as U ON U.id=M.user_id  				LEFT JOIN [pre]o_order_statuses as OS ON OS.id=M.status 				LEFT JOIN [pre]o_payment_statuses as PS ON PS.id=M.pay_status_id  				LEFT JOIN [pre]o_payment_methods as PM ON PM.id=M.pay_method_id  				WHERE 					M.id='$id' 				LIMIT 1				";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());						if($result)			{				$desc = json_decode($result['description'], true, 512, JSON_UNESCAPED_UNICODE);				$result['desc'] = $desc;								$result = array_merge($result, $desc);				$ordernum_return = 0;								$result['boxes'] = array();								if($desc)				{					if(isset($desc['ordernum_return']))					{						$ordernum_return = $desc['ordernum_return'];					}				}								// $q = "SELECT * FROM [pre]o_orders_boxes WHERE (`order_id`='".($ordernum_return-5000)."') AND `box_kind_id`=1 LIMIT 1000";				$q = "SELECT M.*,					(SELECT article FROM [pre]o_boxes WHERE `id`=M.box_id LIMIT 1) as article 					FROM [pre]o_orders_boxes as M 					WHERE 					M.order_id='".($ordernum_return-5000)."' 					AND M.box_kind_id=1 					LIMIT 1000					";				$result['boxes'] = $this->rs($q);								foreach($result['boxes'] as &$curr_rb){					$rb_id = $curr_rb['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rb_id' LIMIT 1000";					$curr_rb['gallery'] = $this->rs($q);				}								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=2 LIMIT 1000";				$result['clothes'] = $this->rs($q);								foreach($result['clothes'] as &$curr_rc){					$rc_id = $curr_rc['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rc_id' LIMIT 1000";					$curr_rc['gallery'] = $this->rs($q);				}								$q = "					SELECT M.* ,						K.image,						K.title,						K.description,						K.price,						K.publish					FROM [pre]o_orders_extras as M 					LEFT JOIN [pre]o_extras_kinds as K ON K.id=M.extra_kind_id  					WHERE 						`order_id`='$id' 					LIMIT 1000";				$result['extras'] = $this->rs($q);			}						return $result;		}				// Get rent orders item				public function getRentOrdersItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "				SELECT M.* , 					CONCAT(U.name, ' ', U.fname) as user_name,					U.login,					U.num as user_number,					OS.name as order_status_name,					PS.name as payment_status_name,					PM.name as payment_method_name,				(SELECT `code` FROM [pre]o_coupons WHERE id=M.promocode_id LIMIT 1) as promo_code 				FROM [pre]o_orders as M 				LEFT JOIN [pre]users as U ON U.id=M.user_id  				LEFT JOIN [pre]o_order_statuses as OS ON OS.id=M.status 				LEFT JOIN [pre]o_payment_statuses as PS ON PS.id=M.pay_status_id  				LEFT JOIN [pre]o_payment_methods as PM ON PM.id=M.pay_method_id  				WHERE 					M.id='$id' 				LIMIT 1				";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());						if($result)			{				$desc = json_decode($result['description'], true, 512, JSON_UNESCAPED_UNICODE);				$result['desc'] = $desc;								$result = array_merge($result, $desc);								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=1 LIMIT 1000";				$result['boxes'] = $this->rs($q);								foreach($result['boxes'] as &$curr_rb){					$rb_id = $curr_rb['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rb_id' LIMIT 1000";					$curr_rb['gallery'] = $this->rs($q);				}								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=2 LIMIT 1000";				$result['clothes'] = $this->rs($q);								foreach($result['clothes'] as &$curr_rc){					$rc_id = $curr_rc['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rc_id' LIMIT 1000";					$curr_rc['gallery'] = $this->rs($q);				}												$q = "					SELECT M.* ,						K.image,						K.title,						K.description,						K.price,						K.publish					FROM [pre]o_orders_extras as M 					LEFT JOIN [pre]o_extras_kinds as K ON K.id=M.extra_kind_id  					WHERE 						`order_id`='$id' 					LIMIT 1000";				$result['extras'] = $this->rs($q);			}						return $result;		}				// Get pallets orders item				public function getPalletsOrdersItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "				SELECT M.* , 					CONCAT(U.name, ' ', U.fname) as user_name,					U.login,					U.num as user_number,					OS.name as order_status_name,					PS.name as payment_status_name,					PM.name as payment_method_name,				(SELECT `code` FROM [pre]o_coupons WHERE id=M.promocode_id LIMIT 1) as promo_code 				FROM [pre]o_orders as M 				LEFT JOIN [pre]users as U ON U.id=M.user_id  				LEFT JOIN [pre]o_order_statuses as OS ON OS.id=M.status 				LEFT JOIN [pre]o_payment_statuses as PS ON PS.id=M.pay_status_id  				LEFT JOIN [pre]o_payment_methods as PM ON PM.id=M.pay_method_id  				WHERE 					M.id='$id' 				LIMIT 1				";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());						if($result)			{				$desc = json_decode($result['description'], true, 512, JSON_UNESCAPED_UNICODE);				$result['desc'] = $desc;								$result = array_merge($result, $desc);								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=3 LIMIT 1000";				$result['pallets'] = $this->rs($q);								foreach($result['pallets'] as &$curr_rb){					$rb_id = $curr_rb['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rb_id' LIMIT 1000";					$curr_rb['gallery'] = $this->rs($q);				}								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=2 LIMIT 1000";				$result['clothes'] = $this->rs($q);								foreach($result['clothes'] as &$curr_rc){					$rc_id = $curr_rc['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rc_id' LIMIT 1000";					$curr_rc['gallery'] = $this->rs($q);				}								$q = "					SELECT M.* ,						K.image,						K.title,						K.description,						K.price,						K.publish					FROM [pre]o_orders_extras as M 					LEFT JOIN [pre]o_extras_kinds as K ON K.id=M.extra_kind_id  					WHERE 						`order_id`='$id' 					LIMIT 1000";				$result['extras'] = $this->rs($q);			}						return $result;		}				// Get BOXES orders item				public function getOrdersItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "				SELECT M.* , 					CONCAT(U.name, ' ', U.fname) as user_name,					U.login,					U.tz,					U.birthday,					U.name,					U.num as user_number,					U.lname,					OS.name as order_status_name,					PS.name as payment_status_name,					PM.name as payment_method_name,				(SELECT `code` FROM [pre]o_coupons WHERE id=M.promocode_id LIMIT 1) as promo_code 				FROM [pre]o_orders as M 				LEFT JOIN [pre]users as U ON U.id=M.user_id  				LEFT JOIN [pre]o_order_statuses as OS ON OS.id=M.status 				LEFT JOIN [pre]o_payment_statuses as PS ON PS.id=M.pay_status_id  				LEFT JOIN [pre]o_payment_methods as PM ON PM.id=M.pay_method_id  				WHERE 					M.id='$id' 				LIMIT 1				";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());						if($result)			{				$desc = json_decode($result['description'], true, 512, JSON_UNESCAPED_UNICODE);				$result['desc'] = $desc;								$result = array_merge($result, $desc);				/*				$result['phone'] 		= $desc->phone;				$result['second_phone'] = $desc->second_phone;				$result['house'] 		= $desc->house;				$result['city'] 		= $desc->city;				$result['street'] 		= $desc->street;				$result['zipcode'] 		= $desc->zipcode;				$result['intercom'] 	= $desc->intercom;				$result['floor'] 		= $desc->floor;				$result['flat'] 		= $desc->flat;				$result['lift'] 		= $desc->lift;				$result['comment'] 		= $desc->comment;				*/								$q = "SELECT M.*,					(SELECT article FROM [pre]o_boxes WHERE `id`=M.box_id LIMIT 1) as article 					FROM [pre]o_orders_boxes as M 					WHERE 					M.order_id='$id' 					AND M.box_kind_id=1 					LIMIT 1000					";				$result['boxes'] = $this->rs($q);								foreach($result['boxes'] as &$curr_rb){					$rb_id = $curr_rb['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rb_id' LIMIT 1000";					$curr_rb['gallery'] = $this->rs($q);				}								$q = "SELECT * FROM [pre]o_orders_boxes WHERE `order_id`='$id' AND `box_kind_id`=2 LIMIT 1000";				$result['clothes'] = $this->rs($q);								foreach($result['clothes'] as &$curr_rc){					$rc_id = $curr_rc['id'];					$q = "SELECT * FROM [pre]o_orders_boxes_ref WHERE `ref_id`='$rc_id' LIMIT 1000";					$curr_rc['gallery'] = $this->rs($q);				}								$q = "					SELECT M.* ,						K.image,						K.title,						K.description,						K.price,						K.publish					FROM [pre]o_orders_extras as M 					LEFT JOIN [pre]o_extras_kinds as K ON K.id=M.extra_kind_id  					WHERE 						`order_id`='$id' 					LIMIT 1000";				$result['extras'] = $this->rs($q);			}			/*			// Вытягиваем данные о картинках				$result['docs'] = array();								$query = "SELECT id,file,crop,path FROM [pre]docs_ref WHERE `ref_table`='menu' AND `ref_id`=$id LIMIT 1000";				$docsMassive = $this->rs($query);								if($docsMassive)				{					$result['docs'] = $docsMassive;				}			*/			return $result;		}			// Get all articles				public function getOrders($params=array(),$typeCount=false, $kind_id=1)		{			// Filter params						$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						// Filter like						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];								$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						// Filter sort						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");						$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						// Order limits						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount)			{							$query = "SELECT M.*,						(SELECT login FROM [pre]users WHERE id=M.user_id LIMIT 1) as user_email,						(SELECT name FROM [pre]o_order_statuses WHERE id=M.status LIMIT 1) as status_name ,						(SELECT name FROM [pre]o_payment_statuses WHERE id=M.pay_status_id LIMIT 1) as payment_status_name 						FROM [pre]o_orders as M  												WHERE M.kind_id='$kind_id' $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										$result = $this->rs($query);								foreach($result as &$pres)				{					$desc = json_decode($pres['description'], true, 512, JSON_UNESCAPED_UNICODE);					$pres['desc'] = $desc;										$pres['ordernum_return'] = (isset($desc['ordernum_return']) ? $desc['ordernum_return'] : "");					$pres['boxes_return'] = (isset($desc['boxes_return']) ? $desc['boxes_return'] : "");				}								return $result;			}else			{				$query = "SELECT COUNT(*)  									FROM [pre]o_orders as M  												WHERE M.kind_id='$kind_id' $filter_and 												LIMIT 100000";										$result = $this->rs($query);				return $result[0]['COUNT(*)'];			}		}				///////////////////////////////////////////				// PRICES SETTINGS				///////////////////////////////////////////				// Get prices settings				public function getPricesSettings($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "SELECT M.*, 						(SELECT image FROM [pre]o_boxes_kinds WHERE id=1 LIMIT 1) as image_1,			(SELECT ".$lpx."title FROM [pre]o_boxes_kinds WHERE id=1 LIMIT 1) as title_1,			(SELECT ".$lpx."description FROM [pre]o_boxes_kinds WHERE id=1 LIMIT 1) as description_1,			(SELECT price FROM [pre]o_boxes_kinds WHERE id=1 LIMIT 1) as price_1,			(SELECT rent_price FROM [pre]o_boxes_kinds WHERE id=1 LIMIT 1) as rent_price_1,						(SELECT image FROM [pre]o_boxes_kinds WHERE id=2 LIMIT 1) as image_2,			(SELECT ".$lpx."title FROM [pre]o_boxes_kinds WHERE id=2 LIMIT 1) as title_2,			(SELECT ".$lpx."description FROM [pre]o_boxes_kinds WHERE id=2 LIMIT 1) as description_2,			(SELECT price FROM [pre]o_boxes_kinds WHERE id=2 LIMIT 1) as price_2,			(SELECT rent_price FROM [pre]o_boxes_kinds WHERE id=2 LIMIT 1) as rent_price_2,						(SELECT image FROM [pre]o_boxes_kinds WHERE id=3 LIMIT 1) as image_3,			(SELECT ".$lpx."title FROM [pre]o_boxes_kinds WHERE id=3 LIMIT 1) as title_3,			(SELECT ".$lpx."description FROM [pre]o_boxes_kinds WHERE id=3 LIMIT 1) as description_3,			(SELECT price FROM [pre]o_boxes_kinds WHERE id=3 LIMIT 1) as price_3,			(SELECT rent_price FROM [pre]o_boxes_kinds WHERE id=3 LIMIT 1) as rent_price_3,						(SELECT ".$lpx."title FROM [pre]o_orders_kinds WHERE id=1 LIMIT 1) as ok_1,			(SELECT publish FROM [pre]o_orders_kinds WHERE id=1 LIMIT 1) as publish_1,						(SELECT ".$lpx."title FROM [pre]o_orders_kinds WHERE id=2 LIMIT 1) as ok_2,			(SELECT publish FROM [pre]o_orders_kinds WHERE id=2 LIMIT 1) as publish_2,						(SELECT ".$lpx."title FROM [pre]o_orders_kinds WHERE id=3 LIMIT 1) as ok_3,			(SELECT publish FROM [pre]o_orders_kinds WHERE id=3 LIMIT 1) as publish_3,						(SELECT ".$lpx."title FROM [pre]o_orders_kinds WHERE id=4 LIMIT 1) as ok_4,			(SELECT publish FROM [pre]o_orders_kinds WHERE id=4 LIMIT 1) as publish_4						FROM [pre]o_prices as M 			WHERE M.id='$id' 			LIMIT 1			";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());									return $result;		}				///////////////////////////////////////////				// PACKING				///////////////////////////////////////////				// Get PACKING item				public function getPackingItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "SELECT M.*, M.".$lpx."title as title, M.".$lpx."description as description			FROM [pre]o_extras_kinds as M 			WHERE `id`='$id' LIMIT 1";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());									return $result;		}					// Get all PACKINGS				public function getPackings($params=array(),$typeCount=false)		{			// Filter params						$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						// Filter like						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];								$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						// Filter sort						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");						$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						// Order limits						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount)			{							$query = "SELECT M.id, M.title, M.description, M.price, M.rent_price, M.publish												FROM [pre]o_extras_kinds as M  												WHERE 1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										return $this->rs($query);							}else			{				$query = "SELECT COUNT(*)  									FROM [pre]o_extras_kinds as M  												WHERE 1 $filter_and 												LIMIT 100000";										$result = $this->rs($query);				return $result[0]['COUNT(*)'];			}		}								// getStorageBoxesItem				public function getStorageBoxesItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "SELECT M.*			FROM [pre]o_boxes as M 			WHERE `id`='$id' LIMIT 1";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());									return $result;		}					// Get getStorageBoxes				public function getStorageBoxes($params=array(),$typeCount=false)		{			// Filter params						$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						// Filter like						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];								$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						// Filter sort						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");						$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						// Order limits						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount)			{							$query = "SELECT M.* 												FROM [pre]o_boxes as M  												WHERE `kind`=1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										return $this->rs($query);							}else			{				$query = "SELECT COUNT(*)  									FROM [pre]o_boxes as M  												WHERE `kind`=1 $filter_and 												LIMIT 100000";										$result = $this->rs($query);				return $result[0]['COUNT(*)'];			}		}				// GET PROMO ITEM				public function getPromoItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "SELECT M.*			FROM [pre]o_coupons as M 			WHERE `id`='$id' LIMIT 1";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());									return $result;		}					// Get getStorageBoxes				public function getPromos($params=array(),$typeCount=false)		{			// Filter params						$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						// Filter like						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];								$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						// Filter sort						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");						$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						// Order limits						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount)			{							$query = "SELECT M.* 												FROM [pre]o_coupons as M  												WHERE 1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										return $this->rs($query);							}else			{				$query = "SELECT COUNT(*)  									FROM [pre]o_coupons as M  												WHERE 1 $filter_and 												LIMIT 100000";										$result = $this->rs($query);				return $result[0]['COUNT(*)'];			}		}				// GET PAYMENT ITEM				public function getSPaymentItem($id, $lpx="")		{			$lpx = ($lpx ? $lpx."_" : "");			$query = "SELECT M.*			FROM [pre]o_payments as M 			WHERE `id`='$id' LIMIT 1";			$resultMassive = $this->rs($query);						$result = ($resultMassive ? $resultMassive[0] : array());									return $result;		}					// Get PAYMENTS				public function getSPayments($params=array(),$typeCount=false)		{			// Filter params						$filter_and = "";						if(isset($params['filtr']['massive']))			{				foreach($params['filtr']['massive'] as $f_name => $f_value)				{					if($f_value < 0) continue;					$filter_and .= " AND ($f_name='$f_value') ";				}			}						// Filter like						if(isset($params['filtr']['filtr_search_key']) && isset($params['filtr']['filtr_search_field']) && trim($params['filtr']['filtr_search_key']) != "")			{				$search_field = $params['filtr']['filtr_search_field'];				$search_key = $params['filtr']['filtr_search_key'];								$filter_and .= " AND ($search_field LIKE '%$search_key%') ";			}						// Filter sort						$sort_field		= (isset($params['filtr']['sort_filtr']) ? $params['filtr']['sort_filtr'] : "M.id");						$sort_vector	= (isset($params['filtr']['order_filtr']) ? $params['filtr']['order_filtr'] : "");						// Order limits						$limit = (isset($_COOKIE['global_on_page']) ? (int)$_COOKIE['global_on_page'] : GLOBAL_ON_PAGE);						if($limit <= 0) $limit = GLOBAL_ON_PAGE;						$start = (isset($params['start']) ? ($params['start']-1)*$limit : 0);						if(!$typeCount)			{							$query = "SELECT M.* 												FROM [pre]o_payments as M  												WHERE 1 $filter_and 						ORDER BY $sort_field $sort_vector 						LIMIT $start,$limit";										return $this->rs($query);							}else			{				$query = "SELECT COUNT(*)  									FROM [pre]o_payments as M  												WHERE 1 $filter_and 												LIMIT 100000";										$result = $this->rs($query);				return $result[0]['COUNT(*)'];			}		}						//==================================================================================		// Get site Positions				public function getPositions()		{			$query = "SELECT id,name FROM [pre]site_positions WHERE 1 ORDER BY id LIMIT 1000";			return $this->rs($query);		}				//==================================================================================		// Get Order statuses				public function getOrderStatuses()		{			$query = "SELECT id,name FROM [pre]o_order_statuses WHERE 1 ORDER BY id LIMIT 1000";			return $this->rs($query);		}				//==================================================================================		// Get order payment statuses				public function getOrderPayStatuses()		{			$query = "SELECT id,name FROM [pre]o_payment_statuses WHERE 1 ORDER BY id LIMIT 1000";			return $this->rs($query);		}				//==================================================================================		// Get site Positions				public function getOrderPayMethods()		{			$query = "SELECT id,name FROM [pre]o_payment_methods WHERE 1 ORDER BY id LIMIT 1000";			return $this->rs($query);		}						//==================================================================================		// Get client orders				public function getClientOrders($user_id)		{			$query = "SELECT id, ordernum FROM [pre]o_orders WHERE `user_id`='$user_id' AND `kind_id`=1 AND (`status`=2 OR `status`=3) LIMIT 1000";			return $this->rs($query);		}						    	public function __destruct(){}}